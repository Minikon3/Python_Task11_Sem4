def ham_dist_naivniy(num1, num2):
    dist = 0
    while num1 or num2: #по очереди рассматриваем каждый бит двух чисел
        if num1 & 1 != num2 & 1: # сравниваем при помощи побитового И
            dist += 1 #Если биты не совпадают, увеличиваем счетчик расстояния Хэмминга
        num1 >>= 1 #побитовый сдвиг
        num2 >>= 1
    return dist
def ham_dist_izyashniy(num1, num2):
    #сначала преобразуем каждое число в его двоичное представление в виде строки при помощи bit
    #Затем мы дополняем каждую строку нулями слева до 32 символов при помощи zfill
    #Далее мы используем функцию zip для итерации по парам битов двух чисел
    #Cчитаем количество несовпадающих битов, используя генератор списка и функцию sum.
    return sum(1 for bit1, bit2 in zip(bin(num1)[2:].zfill(32), bin(num2)[2:].zfill(32)) if bit1 != bit2)

print("Наивный способ: ",ham_dist_naivniy(0b10, 0b11))
print("Однострочный способ: ",ham_dist_izyashniy(0b10, 0b11))

print("Наивный способ: ",ham_dist_naivniy(0b1100, 0b0011))
print("Однострочный способ: ",ham_dist_izyashniy(0b1100, 0b0011))
